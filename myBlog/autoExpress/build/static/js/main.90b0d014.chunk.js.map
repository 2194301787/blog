{"version":3,"sources":["store/action-type.js","component/ajax.js","store/action.js","component/baseURL.js","store/reducer.js","store/store.js","component/asyncComponent.jsx","router/router.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","getUsername","getLoginStatus","Logout","PublicPem","UploadAvatar","UpdateUser","GetBlog","LoadingBlog","ClearBlog","axios__WEBPACK_IMPORTED_MODULE_0__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","_baseURL__WEBPACK_IMPORTED_MODULE_1__","Ajax","axios","create","baseURL","BaseUrl","withCredentials","getUser","value","type","types","user","_ref","Object","G_react_react_own_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","G_react_react_own_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","dispatch","res","wrap","_context","prev","next","post","sent","data","msg","username","phone","birthday","email","myAvatar","status","t0","console","log","stop","this","_x","apply","arguments","publicPem","_ref2","_callee2","_context2","publicDerStr","warn","_x2","uploadAvatar","src","uploadMyAvatar","flag","loadingBlog","pageSize","currentPage","_ref3","_callee3","_context3","blogData","_x3","initState","AddBlogImg","reducer","state","length","undefined","action","fromJS","setIn","toJS","set","get","concat","clear","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","asyncComponent","importComponent","_Component","AsyncComponent","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","component","inherits","createClass","key","_componentDidMount","asyncToGenerator","regenerator_default","default","setState","C","react_default","createElement","Component","Home","Promise","all","e","then","bind","Login","Register","AboutMe","MyBasic","AddBlog","SelectBlog","DetailBlog","Router","react_router_dom","react_router","path","exact","to","connect","App","router","Boolean","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90b0d014.chunk.js","sourcesContent":["export const getUsername = 'nav/GET-USER-NAME';\r\n\r\nexport const getLoginStatus = 'nav/GET-LOGIN-STATUS';\r\n\r\nexport const Logout = 'nav/LOGOUT';\r\n\r\nexport const PublicPem = 'public/publicPem';\r\n\r\nexport const UploadAvatar = 'myBasic/uploadAvatar';\r\n\r\nexport const UpdateUser = 'myBasic/UpdateUser';\r\n\r\nexport const GetBlog = 'blog/getBlog';\r\n\r\nexport const LoadingBlog = 'blog/LoadingBlog';\r\n\r\nexport const ClearBlog = 'blog/clearBlog';\r\n\r\n\r\n\r\n\r\n","import axios from 'axios';\r\nimport {BaseUrl} from './baseURL';\r\n\r\nconst Ajax = axios.create({\r\n    baseURL: BaseUrl,\r\n    withCredentials: true\r\n});\r\n\r\nexport default Ajax;","import * as types from './action-type';\r\nimport Ajax from '../component/ajax';\r\n\r\nexport const getUser = (value) => ({\r\n    type: types.getUsername,\r\n    user: value\r\n});\r\n\r\nexport const getLoginStatus = () => {\r\n    return async dispatch => {\r\n        try {\r\n            let res = await Ajax.post('/getUser');\r\n            if (res.data.msg === 200) {\r\n                dispatch({\r\n                    type: types.getLoginStatus,\r\n                    user: {\r\n                        username: res.data.data.username,\r\n                        phone: res.data.data.phone,\r\n                        birthday: res.data.data.birthday,\r\n                        email: res.data.data.email,\r\n                        myAvatar: res.data.data.myAvatar,\r\n                        status: true\r\n                    }\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: types.getLoginStatus,\r\n                    user: {\r\n                        username: \"\",\r\n                        phone: \"\",\r\n                        birthday: \"\",\r\n                        email: \"\",\r\n                        myAvatar: \"\",\r\n                        status: false\r\n                    }\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n};\r\n\r\nexport const publicPem = () => {\r\n    return async dispatch => {\r\n        try {\r\n            let res = await Ajax.post('/getPublicDerStr');\r\n            if (res.data.msg === 200) {\r\n                dispatch({\r\n                    type: types.PublicPem,\r\n                    publicPem: res.data.data.publicDerStr\r\n                });\r\n            } else {\r\n                console.warn(res.data.data);\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n}\r\n\r\nexport const Logout = (value) => ({\r\n    type: types.Logout,\r\n    user: value\r\n})\r\n\r\nexport const uploadAvatar = (src) => ({\r\n    type: types.UploadAvatar,\r\n    uploadMyAvatar: src\r\n})\r\n\r\nexport const UpdateUser = (value) => ({\r\n    type: types.UpdateUser,\r\n    user: value\r\n})\r\n\r\n\r\nexport const LoadingBlog = (flag) => ({\r\n    type: types.LoadingBlog,\r\n    loadingBlog: !flag\r\n})\r\n\r\nexport const GetBlog = (pageSize, currentPage, type) => {\r\n    return async dispatch => {\r\n        try {\r\n            let res = await Ajax.post('/selectBlog', {\r\n                pageSize,\r\n                currentPage,\r\n                type\r\n            });\r\n            if (res.data.msg === 200) {\r\n                dispatch({\r\n                    type: types.GetBlog,\r\n                    blogData: res.data.data\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: types.GetBlog,\r\n                    blogData: []\r\n                })\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport const ClearBlog = ()=>({\r\n    type:types.ClearBlog\r\n})","export const BaseUrl = 'http://localhost:9090';","import { fromJS } from 'immutable';\r\nimport * as types from './action-type';\r\n\r\nconst initState = {\r\n    user: {\r\n        username: \"\",\r\n        phone: \"\",\r\n        birthday: \"\",\r\n        email: \"\",\r\n        myAvatar: \"\",\r\n        status: false,\r\n    },\r\n    publicPem: \"\",\r\n    uploadMyAvatar: \"\",\r\n    AddBlogImg: [],\r\n    blogData: [],\r\n    loadingBlog: true\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n    let newList;\r\n    switch (action.type) {\r\n        case types.getUsername:\r\n            newList = fromJS(state).setIn(['user'], fromJS(action.user), fromJS(action.myAvatar));\r\n            return newList.toJS();\r\n        case types.getLoginStatus:\r\n            newList = fromJS(state).setIn(['user'], fromJS(action.user), fromJS(action.myAvatar));\r\n            return newList.toJS();\r\n        case types.Logout:\r\n            newList = fromJS(state).setIn(['user'], fromJS(action.user), fromJS(action.myAvatar));\r\n            return newList.toJS();\r\n        case types.PublicPem:\r\n            newList = fromJS(state).setIn(['publicPem'], fromJS(action.publicPem));\r\n            return newList.toJS();\r\n        case types.UploadAvatar:\r\n            newList = fromJS(state).setIn(['uploadMyAvatar'], fromJS(action.uploadMyAvatar));\r\n            return newList.toJS();\r\n        case types.UpdateUser:\r\n            newList = fromJS(state).setIn(['user'], fromJS(action.user));\r\n            return newList.toJS();\r\n        case types.GetBlog:\r\n            newList = fromJS(state).set(\"blogData\", fromJS(state).get(\"blogData\").concat(action.blogData));\r\n            return newList.toJS();\r\n        case types.LoadingBlog:\r\n            newList = fromJS(state).setIn([\"loadingBlog\"], fromJS(action.loadingBlog));\r\n            return newList.toJS();\r\n        case types.ClearBlog:\r\n        newList = fromJS(state).set(\"blogData\", fromJS(state).get(\"blogData\").clear());\r\n            return newList.toJS();\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { createStore,applyMiddleware,compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducer';\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n    }) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(thunk)\r\n);\r\nconst store = createStore(reducer, enhancer);\r\n\r\nexport default store;","import React, { Component } from \"react\";\n\nexport default function asyncComponent(importComponent) {\n  class AsyncComponent extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        component: null\n      };\n    }\n\n    async componentDidMount() {\n      const { default: component } = await importComponent();\n\n      this.setState({component});\n    }\n\n    render() {\n      const C = this.state.component;\n\n      return C ? <C {...this.props} /> : null;\n    }\n  }\n\n  return AsyncComponent;\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Redirect, Switch } from 'react-router-dom';\r\nimport asyncComponent from '../component/asyncComponent';\r\nimport { publicPem,getLoginStatus } from '../store/action';\r\nimport {connect} from 'react-redux';\r\n\r\nconst Home = asyncComponent(() => import(\"../page/home/home\"));\r\nconst Login = asyncComponent(() => import(\"../page/login/login\"));\r\nconst Register = asyncComponent(() => import(\"../page/register/register\"));\r\nconst AboutMe = asyncComponent(()=> import(\"../page/aboutMe/aboutMe\"));\r\nconst MyBasic = asyncComponent(()=> import(\"../page/myBasic/myBasic\"));\r\nconst AddBlog = asyncComponent(()=> import(\"../page/addBlog/addBlog\"));\r\nconst SelectBlog = asyncComponent(()=> import(\"../page/selectBlog/selectBlog\"));\r\nconst DetailBlog = asyncComponent(()=> import(\"../page/detailBlog/detailBlog\"));\r\n\r\nclass Router extends Component {\r\n    componentDidMount(){\r\n        this.props.publicPem();\r\n        this.props.getLoginStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={Home} />\r\n                    <Route path=\"/login\" component={Login} />\r\n                    <Route path=\"/register\" component={Register} />\r\n                    <Route path=\"/aboutMe\" component={AboutMe}/>\r\n                    <Route path=\"/myBasic\" component={MyBasic}/>\r\n                    <Route path=\"/addBlog\" component={AddBlog}/>\r\n                    <Route path=\"/blog\" component={SelectBlog}/>\r\n                    <Route path=\"/detailBlog/:id\" component={DetailBlog}/>\r\n                    <Redirect to=\"/\" />\r\n                </Switch>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\nexport default connect(null,{\r\n    publicPem,\r\n    getLoginStatus\r\n})(Router);","import React, { Component } from 'react';\nimport Router from './router/router';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}